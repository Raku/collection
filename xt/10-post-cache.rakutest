use Test;
use File::Directory::Tree;
use Test::Deeply::Relaxed;

use Collection;
constant TMP = 'xt/test-dir';
constant MODE = 'test-mode';

bail-out "TMP must exit. Have pre-render tests been run?"
unless TMP.IO.d;

my $orig = $*CWD;
chdir TMP;

plan 3;
my $rv;

# add a mode directory, with its config files, and plugins directory and some setup plugins
if MODE.IO.d { empty-directory MODE }
else { mktree MODE }
mktree MODE ~ '/m-sources';
(MODE ~ '/m-sources/placeholder.pod6').IO.spurt('# nothing here');
my @pls = <setup1 setup_rend rend2 reporter completer unused>;
mktree MODE ~ '/configs';
mktree(MODE ~ "/some-plugs/$_") for @pls;
(MODE ~ '/configs/01-basic.raku').IO.spurt( qq:to/CONF/);
    %(
        mode-cache => 'm-cache',
        mode-sources => 'm-sources',
        :no-refresh,
        :!recompile,
        mode-ignore => (),
        mode-obtain => (),
        mode-refresh => (),
        mode-extensions => <rakudoc pod6>,
        :!full-render,
        :!no-report,
        :!no-completion,
        plugins => 'some-plugs',
    );
    CONF
(MODE ~ '/configs/02-plugin.raku').IO.spurt( qq:to/CONF/ );
    %(
        plugins-required => %(
            setup => ('{ @pls[0] }', '{ @pls[1] }',) ,
            render => ('{ @pls[1] }', '{ @pls[2] }', '{ @pls[3] }', ) ,
            report => ('{ @pls[3] }',),
            completion => ('{ @pls[4] }',),
        ),
    );
    CONF

for @pls {
    (MODE ~ "/some-plugs/$_/config.raku").IO.spurt(qq:to/CONF/);
        %(
        { given $_ {
        when 'setup1' {"setup => True, processor => \'proc.raku\' "}
        when 'setup_rend' {"setup => True, render => True, processor => \'proc.raku\' "}
        when 'reporter' {"report => True"}
        when 'completer' {"complete => True "}
        default {"name => \'{ $_ }\', report => True "}
        }},
        );
        CONF
}
for <setup1 setup_rend> {
        (MODE ~ "/some-plugs/$_/proc.raku").IO.spurt(qq:to/CONF/);
        sub ( \$a ) \{
                \$a[0].add( 'first{$_}', [ Pod::Block.new(contents => ['abc',])] );
        \}
        CONF
}
$rv = collect(MODE, :no-status, :no-cache, :end<post-cache>, :recompile );
#recompile to ensure that the cache is emptied
isa-ok $rv[0], Pod::From::Cache, 'first of list';
isa-ok $rv[0], Pod::From::Cache, 'second of list';
is-deeply-relaxed
        $rv[0].list-files.Set,
        <sources/file-a.pod6 sources/file-b.pod6 sources/file-c.pod6 firstsetup1 firstsetup_rend>.Set,
        'cache altered';

done-testing;
