use Test;
use Test::Deeply::Relaxed;
use File::Directory::Tree;

use Collection;
constant TMP = 'xt/test-dir';
constant MODE = 'test-mode';
constant PLUGS = "{MODE}/some-plugs";
constant CONFS = "{MODE}/configs";
constant TEMPLATES = "{MODE}/templates";
constant HTML = "{ MODE }/html";

plan 8;
my $rv;

bail-out "{TMP} and {TMP}/{ MODE } must exit. Have source tests been run?"
    unless TMP.IO.d and "{TMP}/{ MODE }".IO.d;

#my @pls = <setup1 setup_rend rend2 reporter compiler completer unused>;

my $orig = $*CWD;
chdir TMP;
bail-out "{ TEMPLATES } must exit. Have the render tests been run?"
    unless TEMPLATES.IO.d;

#rewrite the config for compiler plugin
(PLUGS ~ '/compiler/config.raku').IO.spurt(q:to/CONF/);
    %(
        :compilation<frontmatter.raku>
    )
    CONF

#fake compilation
(PLUGS ~ '/compiler/frontmatter.raku').IO.spurt(q:to/CONF/);
    sub ($pr, %processed) { } # do nothing, this is a placeholder
    CONF

# test single file run
# output directory at this point should be empty, so make sure
empty-directory HTML;
$rv = collect(MODE, :no-status, :no-cache, :end<compilation>, :full-render, :with-only<file-c>);
ok "{HTML}/file-c.html".IO.f, 'got file-c';
is HTML.IO.dir(test => / '.html' /).elems, 1, 'only one output file';

# test debug-when, together with the OUTPUT tests
use Test::Output;
output-like { $rv = collect(MODE, :no-status, :no-cache, :end<compilation>, :full-render, :debug-when<file-c>) },
        / 'Processing first pod declaration in file sources/file-c.pod6' /,
        'outputs info about file-c';

#rewrite the config for compiler plugin
(PLUGS ~ '/compiler/config.raku').IO.spurt( q:to/CONF/);
    %(
        :compilation<frontmatter.raku>
    )
    CONF
(PLUGS ~ '/compiler/frontmatter.raku').IO.spurt( q:to/CODE/);
    sub ($pr, %processed) {
        for <toc footnotes glossary meta> -> $component {
            #%data contains keys for each source and sub-keys for each page component
            # what is required is to make the structure pointed to by raw-component available
            # to a collection structure with sub-keys of filenames
            $pr.add-data("collection-$component",
                    %( |gather for %processed.keys {
                        take $_ => %processed{$_}{"raw-$component"} }) )
        }
    }
    CODE

stdout-like  {
    $rv = collect(MODE, :collection-info, :no-status, :no-cache, :end<compilation>, :full-render, :no-refresh) ;
},
    / 'Passed <Render> milestone' .+ 'is listed for milestone' .+ 'compilation'/,
    'got collection info';

is-deeply-relaxed $rv[1].keys.Set,
        <extra_0_setup1 extra_1_setup_rend file-a file-b file-c>.Set,
        'got all the files in cache';
is-deeply-relaxed $rv[0].plugin-datakeys.Set,
        <image-manager rend2 setup_rend collection-footnotes collection-toc collection-glossary collection-meta mode-name gather-css>.Set,
        'name-spaces set up';
is-deeply-relaxed "{MODE}/html".IO.dir(test => /'.html'/)>>.relative(MODE ~ '/html').Set,
        (<extra_0_setup1 extra_1_setup_rend file-a file-b file-c> >>~>> '.html').Set,
        'got all the files in cache';
isa-ok $rv[0].get-data('collection-toc'), Associative , 'plugin data key has content';

done-testing;
