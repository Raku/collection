use v6.*;
use Test;

use File::Directory::Tree;
use Test::Deeply::Relaxed;
use ProcessedPod;

use Collection;
constant TMP = 'xt/test-dir';
constant MODE = 'test-mode';
constant PLUGS = "{MODE}/some-plugs";
constant CONFS = "{MODE}/configs";
constant TEMPLATES = "{MODE}/templates";
constant HTML = "{MODE}/html";

plan 6;
my $rv;

bail-out "{TMP} and {TMP}/{ MODE } must exit. Have source tests been run?"
unless TMP.IO.d and "{TMP}/{ MODE }".IO.d;
mktree TMP ~ '/' ~ TEMPLATES;
'resources/min-templates.raku'.IO.copy:
        TMP ~ '/' ~ TEMPLATES ~ '/mintemp.raku' ;
#my @pls = <setup1 setup_rend rend2 reporter compiler completer unused>;
my $orig = $*CWD;
chdir TMP;
bail-out "{PLUGS} and { CONFS } must exit. Have setup tests been run?"
        unless PLUGS.IO.d and CONFS.IO.d;

mktree( HTML) unless HTML.IO.d ;

# rewrite the config and plugin test files for render plugins
(PLUGS ~ '/setup_rend/config.raku' ).IO.spurt(q:to/CONF/);
        %(
        :render,
        :template-raku<templates.raku>,
        :custom-raku<blocks.raku>,
        :setup<proc.raku>,
        )
        CONF

(PLUGS ~ '/rend2/config.raku' ).IO.spurt(q:to/CONF/);
        %(     
        :render,
        :template-raku<templates.raku>,
        :custom-raku<blocks.raku>,
        :css<mystyling.css>,
        )
        CONF
(PLUGS ~ '/gather-css/config.raku' ).IO.spurt(q:to/CONF/);
        %(
        :render<css-collect.raku>,
        :template-raku(),
        :custom-raku(),
        )
        CONF
# template raku files
(PLUGS ~ '/setup_rend/templates.raku' ).IO.spurt(q:to/CONF/);
        %(
        design => sub ( %a, %b ) {
                '<designer-tag>' ~ %a<contents> ~ '</designer-tag'
        },
        diagram => sub (%a, %b ) {
                '<diag>' ~ %a<contents> ~ '</diag>'
        },
        )
        CONF

(PLUGS ~ '/rend2/templates.raku' ).IO.spurt(q:to/CONF/);
        %(
        sorted-table => sub (%a, %b) {
                '<table class="sorted">' ~ %a<contents> ~ '</table>'
        },
        )
        CONF
#block files
(PLUGS ~ '/setup_rend/blocks.raku' ).IO.spurt(q:to/CONF/);
        <design diagram>
        CONF
#its intentional to overwrite diagram. rend2 comes after setup_rend
(PLUGS ~ '/rend2/blocks.raku' ).IO.spurt(q:to/CONF/);
        <figure diagram sorted-table>
        CONF
(PLUGS ~ '/rend2/mystyling.css' ).IO.spurt(q:to/CONF/);
        .design { font-size: large; }
        CONF
#create a plugin that looks for css files, creates a local css file, passes it back
# where it is written to output
(PLUGS ~ '/gather-css/css-collect.raku' ).IO.spurt(q:to/CONF/);
        sub ( $pp ) {
                my $css = '';
                for $pp.plugin-datakeys {
                        my $data = $pp.get-data($_);
                        next unless $data ~~ Associative and $data<css>:exists and $data<css> ~~ Str:D;
                        my $file = ($data<path> ~ '/' ~ $data<css>).IO;
                        $css ~= "\n" ~ $file.slurp;
                }
                'local.css'.IO.spurt($css);
                %( 'assets/css/local.css' => 'local.css' )
        }
        CONF

$rv = collect(MODE, :no-status, :no-cache, :end<render>, :recompile, :full-render);
isa-ok $rv, ProcessedPod, 'got the correct object';
is-deeply-relaxed $rv.custom.Set,
        <figure diagram sorted-table design>.Set,
        'plugin added the custom blocks';
ok $rv.tmpl<sorted-table>:exists,'template was added from rend2';
ok $rv.tmpl<design>:exists, 'template was added from setup_rend';

ok (HTML ~ '/assets/css/local.css').IO.f, 'file exists';
like (HTML ~ '/assets/css/local.css').IO.slurp,
        /
        '.design { font-size: large;'
        /, 'css from other plugin has be copied';

done-testing;
